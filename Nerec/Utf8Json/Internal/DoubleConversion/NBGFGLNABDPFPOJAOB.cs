using System;

namespace Utf8Json.Internal.DoubleConversion
{
	// Token: 0x020000C6 RID: 198
	internal static class NBGFGLNABDPFPOJAOB
	{
		// Token: 0x06000345 RID: 837 RVA: 0x00012420 File Offset: 0x00010620
		public static void GetCachedPowerForBinaryExponentRange(int min_exponent, int max_exponent, out HDHDIOINPIINFEHAMH power, out int decimal_exponent)
		{
			int num = 64;
			double num2 = Math.Ceiling((double)(min_exponent + num - 1) * 0.30102999566398114);
			int num3 = (348 + (int)num2 - 1) / 8 + 1;
			MNOLJABBCPCCAJOOBF mnoljabbcpccajoobf = NBGFGLNABDPFPOJAOB.kCachedPowers[num3];
			decimal_exponent = (int)mnoljabbcpccajoobf.decimal_exponent;
			power = new HDHDIOINPIINFEHAMH(mnoljabbcpccajoobf.significand, (int)mnoljabbcpccajoobf.binary_exponent);
		}

		// Token: 0x06000346 RID: 838 RVA: 0x00012480 File Offset: 0x00010680
		public static void GetCachedPowerForDecimalExponent(int requested_exponent, out HDHDIOINPIINFEHAMH power, out int found_exponent)
		{
			int num = (requested_exponent + 348) / 8;
			MNOLJABBCPCCAJOOBF mnoljabbcpccajoobf = NBGFGLNABDPFPOJAOB.kCachedPowers[num];
			power = new HDHDIOINPIINFEHAMH(mnoljabbcpccajoobf.significand, (int)mnoljabbcpccajoobf.binary_exponent);
			found_exponent = (int)mnoljabbcpccajoobf.decimal_exponent;
		}

		// Token: 0x04000209 RID: 521
		private static readonly MNOLJABBCPCCAJOOBF[] kCachedPowers = new MNOLJABBCPCCAJOOBF[]
		{
			new MNOLJABBCPCCAJOOBF(18054884314459144840UL, -1220, -348),
			new MNOLJABBCPCCAJOOBF(13451937075301367670UL, -1193, -340),
			new MNOLJABBCPCCAJOOBF(10022474136428063862UL, -1166, -332),
			new MNOLJABBCPCCAJOOBF(14934650266808366570UL, -1140, -324),
			new MNOLJABBCPCCAJOOBF(11127181549972568877UL, -1113, -316),
			new MNOLJABBCPCCAJOOBF(16580792590934885855UL, -1087, -308),
			new MNOLJABBCPCCAJOOBF(12353653155963782858UL, -1060, -300),
			new MNOLJABBCPCCAJOOBF(18408377700990114895UL, -1034, -292),
			new MNOLJABBCPCCAJOOBF(13715310171984221708UL, -1007, -284),
			new MNOLJABBCPCCAJOOBF(10218702384817765436UL, -980, -276),
			new MNOLJABBCPCCAJOOBF(15227053142812498563UL, -954, -268),
			new MNOLJABBCPCCAJOOBF(11345038669416679861UL, -927, -260),
			new MNOLJABBCPCCAJOOBF(16905424996341287883UL, -901, -252),
			new MNOLJABBCPCCAJOOBF(12595523146049147757UL, -874, -244),
			new MNOLJABBCPCCAJOOBF(9384396036005875287UL, -847, -236),
			new MNOLJABBCPCCAJOOBF(13983839803942852151UL, -821, -228),
			new MNOLJABBCPCCAJOOBF(10418772551374772303UL, -794, -220),
			new MNOLJABBCPCCAJOOBF(15525180923007089351UL, -768, -212),
			new MNOLJABBCPCCAJOOBF(11567161174868858868UL, -741, -204),
			new MNOLJABBCPCCAJOOBF(17236413322193710309UL, -715, -196),
			new MNOLJABBCPCCAJOOBF(12842128665889583758UL, -688, -188),
			new MNOLJABBCPCCAJOOBF(9568131466127621947UL, -661, -180),
			new MNOLJABBCPCCAJOOBF(14257626930069360058UL, -635, -172),
			new MNOLJABBCPCCAJOOBF(10622759856335341974UL, -608, -164),
			new MNOLJABBCPCCAJOOBF(15829145694278690180UL, -582, -156),
			new MNOLJABBCPCCAJOOBF(11793632577567316726UL, -555, -148),
			new MNOLJABBCPCCAJOOBF(17573882009934360870UL, -529, -140),
			new MNOLJABBCPCCAJOOBF(13093562431584567480UL, -502, -132),
			new MNOLJABBCPCCAJOOBF(9755464219737475723UL, -475, -124),
			new MNOLJABBCPCCAJOOBF(14536774485912137811UL, -449, -116),
			new MNOLJABBCPCCAJOOBF(10830740992659433045UL, -422, -108),
			new MNOLJABBCPCCAJOOBF(16139061738043178685UL, -396, -100),
			new MNOLJABBCPCCAJOOBF(12024538023802026127UL, -369, -92),
			new MNOLJABBCPCCAJOOBF(17917957937422433684UL, -343, -84),
			new MNOLJABBCPCCAJOOBF(13349918974505688015UL, -316, -76),
			new MNOLJABBCPCCAJOOBF(9946464728195732843UL, -289, -68),
			new MNOLJABBCPCCAJOOBF(14821387422376473014UL, -263, -60),
			new MNOLJABBCPCCAJOOBF(11042794154864902060UL, -236, -52),
			new MNOLJABBCPCCAJOOBF(16455045573212060422UL, -210, -44),
			new MNOLJABBCPCCAJOOBF(12259964326927110867UL, -183, -36),
			new MNOLJABBCPCCAJOOBF(18268770466636286478UL, -157, -28),
			new MNOLJABBCPCCAJOOBF(13611294676837538539UL, -130, -20),
			new MNOLJABBCPCCAJOOBF(10141204801825835212UL, -103, -12),
			new MNOLJABBCPCCAJOOBF(15111572745182864684UL, -77, -4),
			new MNOLJABBCPCCAJOOBF(11258999068426240000UL, -50, 4),
			new MNOLJABBCPCCAJOOBF(16777216000000000000UL, -24, 12),
			new MNOLJABBCPCCAJOOBF(12500000000000000000UL, 3, 20),
			new MNOLJABBCPCCAJOOBF(9313225746154785156UL, 30, 28),
			new MNOLJABBCPCCAJOOBF(13877787807814456755UL, 56, 36),
			new MNOLJABBCPCCAJOOBF(10339757656912845936UL, 83, 44),
			new MNOLJABBCPCCAJOOBF(15407439555097886824UL, 109, 52),
			new MNOLJABBCPCCAJOOBF(11479437019748901445UL, 136, 60),
			new MNOLJABBCPCCAJOOBF(17105694144590052135UL, 162, 68),
			new MNOLJABBCPCCAJOOBF(12744735289059618216UL, 189, 76),
			new MNOLJABBCPCCAJOOBF(9495567745759798747UL, 216, 84),
			new MNOLJABBCPCCAJOOBF(14149498560666738074UL, 242, 92),
			new MNOLJABBCPCCAJOOBF(10542197943230523224UL, 269, 100),
			new MNOLJABBCPCCAJOOBF(15709099088952724970UL, 295, 108),
			new MNOLJABBCPCCAJOOBF(11704190886730495818UL, 322, 116),
			new MNOLJABBCPCCAJOOBF(17440603504673385349UL, 348, 124),
			new MNOLJABBCPCCAJOOBF(12994262207056124023UL, 375, 132),
			new MNOLJABBCPCCAJOOBF(9681479787123295682UL, 402, 140),
			new MNOLJABBCPCCAJOOBF(14426529090290212157UL, 428, 148),
			new MNOLJABBCPCCAJOOBF(10748601772107342003UL, 455, 156),
			new MNOLJABBCPCCAJOOBF(16016664761464807395UL, 481, 164),
			new MNOLJABBCPCCAJOOBF(11933345169920330789UL, 508, 172),
			new MNOLJABBCPCCAJOOBF(17782069995880619868UL, 534, 180),
			new MNOLJABBCPCCAJOOBF(13248674568444952270UL, 561, 188),
			new MNOLJABBCPCCAJOOBF(9871031767461413346UL, 588, 196),
			new MNOLJABBCPCCAJOOBF(14708983551653345445UL, 614, 204),
			new MNOLJABBCPCCAJOOBF(10959046745042015199UL, 641, 212),
			new MNOLJABBCPCCAJOOBF(16330252207878254650UL, 667, 220),
			new MNOLJABBCPCCAJOOBF(12166986024289022870UL, 694, 228),
			new MNOLJABBCPCCAJOOBF(18130221999122236476UL, 720, 236),
			new MNOLJABBCPCCAJOOBF(13508068024458167312UL, 747, 244),
			new MNOLJABBCPCCAJOOBF(10064294952495520794UL, 774, 252),
			new MNOLJABBCPCCAJOOBF(14996968138956309548UL, 800, 260),
			new MNOLJABBCPCCAJOOBF(11173611982879273257UL, 827, 268),
			new MNOLJABBCPCCAJOOBF(16649979327439178909UL, 853, 276),
			new MNOLJABBCPCCAJOOBF(12405201291620119593UL, 880, 284),
			new MNOLJABBCPCCAJOOBF(9242595204427927429UL, 907, 292),
			new MNOLJABBCPCCAJOOBF(13772540099066387757UL, 933, 300),
			new MNOLJABBCPCCAJOOBF(10261342003245940623UL, 960, 308),
			new MNOLJABBCPCCAJOOBF(15290591125556738113UL, 986, 316),
			new MNOLJABBCPCCAJOOBF(11392378155556871081UL, 1013, 324),
			new MNOLJABBCPCCAJOOBF(16975966327722178521UL, 1039, 332),
			new MNOLJABBCPCCAJOOBF(12648080533535911531UL, 1066, 340)
		};

		// Token: 0x0400020A RID: 522
		public const int kCachedPowersOffset = 348;

		// Token: 0x0400020B RID: 523
		public const double kD_1_LOG2_10 = 0.30102999566398114;

		// Token: 0x0400020C RID: 524
		public const int kDecimalExponentDistance = 8;

		// Token: 0x0400020D RID: 525
		public const int kMinDecimalExponent = -348;

		// Token: 0x0400020E RID: 526
		public const int kMaxDecimalExponent = 340;
	}
}
